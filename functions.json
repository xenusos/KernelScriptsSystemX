{
	"open": [
		"long vfs_truncate(const struct path *path, loff_t length)",
		"int vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)",
		{
			"name": "finish_open",
			"returnType": {"linux": "int"},
			"parameters": [	{"linux": "struct file *", "name": "file"},
							{"linux": "struct dentry *", "name": "dentry"},
							{"xenus": "void *", "name": "sysvcb"},
							{"linux": "int *", "name": "opened"}]
		},
		"int finish_no_open(struct file *file, struct dentry *dentry)",
		"char *file_path(struct file *filp, char *buf, int buflen)",
		"struct file *dentry_open(const struct path *path, int flags, const struct cred *cred)",
		"struct file *filp_open(const char *filename, int flags, umode_t mode)",
		"struct file *file_open_root(struct dentry *dentry, struct vfsmount *mnt, const char *filename, int flags, umode_t mode)",
		"int filp_close(struct file *filp, fl_owner_t id)",
		"int generic_file_open(struct inode * inode, struct file * filp)",
		"int nonseekable_open(struct inode *inode, struct file *filp)"
	],
	"namei": [
		"int generic_permission(struct inode *inode, int mask)",
		"int __inode_permission(struct inode *inode, int mask)",
		"int inode_permission(struct inode *inode, int mask)",
		"void path_get(const struct path *path)",
		"void path_put(const struct path *path)",
		"int follow_up(struct path *path)",
		"int follow_down_one(struct path *path)",
		"int follow_down(struct path *path)",
		"unsigned int full_name_hash(const void *salt, const char *name, unsigned int len)",
		"u64 hashlen_string(const void *salt, const char *name)",
		"int kern_path(const char *name, unsigned int flags, struct path *path)",
		"int vfs_path_lookup(struct dentry *dentry, struct vfsmount *mnt, const char *name, unsigned int flags, struct path *path)",
		"struct dentry *lookup_one_len(const char *name, struct dentry *base, int len)",
		"struct dentry *lookup_one_len_unlocked(const char *name, struct dentry *base, int len)",
		"int user_path_at_empty(int dfd, const char __user *name, unsigned flags, struct path *path, int *empty)",
		"int kern_path_mountpoint(int dfd, const char *name, struct path *path, unsigned int flags)",
		"int __check_sticky(struct inode *dir, struct inode *inode)",
		"struct dentry *lock_rename(struct dentry *p1, struct dentry *p2)",
		"void unlock_rename(struct dentry *p1, struct dentry *p2)",
		"int vfs_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool want_excl)",
		"struct dentry *vfs_tmpfile(struct dentry *dentry, umode_t mode, int open_flag)",
		"struct dentry *kern_path_create(int dfd, const char *pathname, struct path *path, unsigned int lookup_flags)",
		"void done_path_create(struct path *path, struct dentry *dentry)",
		"struct dentry *user_path_create(int dfd, const char __user *pathname, struct path *path, unsigned int lookup_flags)",
		"int vfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)",
		"int vfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)",
		"int vfs_rmdir(struct inode *dir, struct dentry *dentry)",
		"int vfs_unlink(struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)",
		"int vfs_symlink(struct inode *dir, struct dentry *dentry, const char *oldname)",
		"int vfs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *new_dentry, struct inode **delegated_inode)",
		"int vfs_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry, struct inode **delegated_inode, unsigned int flags)",
		"int vfs_whiteout(struct inode *dir, struct dentry *dentry)",
		"int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen)",
		"const char *vfs_get_link(struct dentry *dentry, struct delayed_call *done)",
		"void page_put_link(void *arg)",
		"int page_readlink(struct dentry *dentry, char __user *buffer, int buflen)",
		"int __page_symlink(struct inode *inode, const char *symname, int len, int nofs)",
		"int page_symlink(struct inode *inode, const char *symname, int len)"
	],
	"stat":
	[
		"void generic_fillattr(struct inode *inode, struct kstat *stat)",
		"int vfs_getattr_nosec(const struct path *path, struct kstat *stat, u32 request_mask, unsigned int query_flags)",
		"int vfs_getattr(const struct path *path, struct kstat *stat, u32 request_mask, unsigned int query_flags)",
		"int vfs_statx_fd(unsigned int fd, struct kstat *stat, u32 request_mask, unsigned int query_flags)",
		"int vfs_statx(int dfd, const char __user *filename, int flags, struct kstat *stat, u32 request_mask)",
		"void __inode_add_bytes(struct inode *inode, loff_t bytes)",
		"void inode_add_bytes(struct inode *inode, loff_t bytes)",
		"void __inode_sub_bytes(struct inode *inode, loff_t bytes)",
		"void inode_sub_bytes(struct inode *inode, loff_t bytes)",
		"loff_t inode_get_bytes(struct inode *inode)",
		"void inode_set_bytes(struct inode *inode, loff_t bytes)"
	],
	"read_write":
	[
		"loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize)",
		"loff_t generic_file_llseek_size(struct file *file, loff_t offset, int whence, loff_t maxsize, loff_t eof)",
		"loff_t generic_file_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t fixed_size_llseek(struct file *file, loff_t offset, int whence, loff_t size)",
		"loff_t no_seek_end_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t no_seek_end_llseek_size(struct file *file, loff_t offset, int whence, loff_t size)",
		"loff_t noop_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t no_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t default_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t vfs_llseek(struct file *file, loff_t offset, int whence)",
		"ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)",
		"ssize_t __kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)",
		"ssize_t kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)",
		"ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos, rwf_t flags)",
		"ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos, rwf_t flags)"
	],
	"timekeeping":
	[
		"u64 ktime_get_mono_fast_ns(void)",
		"u64 ktime_get_raw_fast_ns(void)",
		"u64 notrace ktime_get_boot_fast_ns(void)",
		"int pvclock_gtod_register_notifier(struct notifier_block *nb)",
		"int pvclock_gtod_unregister_notifier(struct notifier_block *nb)",
		"int __getnstimeofday64(struct timespec64 *ts)",
		"void getnstimeofday64(struct timespec64 *ts)",
		"ktime_t ktime_get(void)",
		"u32 ktime_get_resolution_ns(void)",
		"ktime_t ktime_get_with_offset(enum tk_offsets offs)",
		"ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs)",
		"ktime_t ktime_get_raw(void)",
		"void ktime_get_ts64(struct timespec64 *ts)",
		"time64_t ktime_get_seconds(void)",
		"time64_t ktime_get_real_seconds(void)",
		"void do_gettimeofday(struct timeval *tv)",
		"int do_settimeofday64(const struct timespec64 *ts)",
		"void getrawmonotonic64(struct timespec64 *ts)"
	],
	"timer":
	[
		"unsigned long round_jiffies(unsigned long j)",
		"unsigned long round_jiffies_relative(unsigned long j)",
		"unsigned long __round_jiffies_up(unsigned long j, int cpu)",
		"unsigned long round_jiffies_up(unsigned long j)",
		"unsigned long round_jiffies_up_relative(unsigned long j)",
		"void msleep(unsigned int msecs)",
		"unsigned long msleep_interruptible(unsigned int msecs)",
		"void __sched usleep_range(unsigned long min, unsigned long max)"
	]
}