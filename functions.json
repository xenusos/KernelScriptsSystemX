{
	"open": [
		"long vfs_truncate(const struct path *path, loff_t length)",
		"int vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len)",
		{
			"name": "finish_open",
			"returnType": {"linux": "int"},
			"parameters": [	{"linux": "struct file *", "name": "file"},
							{"linux": "struct dentry *", "name": "dentry"},
							{"xenus": "sysv_fptr_t", "name": "sysvcb"},
							{"linux": "int *", "name": "opened"}]
		},
		"int finish_no_open(struct file *file, struct dentry *dentry)",
		"char *file_path(struct file *filp, char *buf, int buflen)",
		"struct file *dentry_open(const struct path *path, int flags, const struct cred *cred)",
		"struct file *filp_open(const char *filename, int flags, umode_t mode)",
		"struct file *file_open_root(struct dentry *dentry, struct vfsmount *mnt, const char *filename, int flags, umode_t mode)",
		"int filp_close(struct file *filp, fl_owner_t id)",
		"int generic_file_open(struct inode * inode, struct file * filp)",
		"int nonseekable_open(struct inode *inode, struct file *filp)"
	],
	"namei": [
		"int generic_permission(struct inode *inode, int mask)",
		"int __inode_permission(struct inode *inode, int mask)",
		"int inode_permission(struct inode *inode, int mask)",
		"void path_get(const struct path *path)",
		"void path_put(const struct path *path)",
		"int follow_up(struct path *path)",
		"int follow_down_one(struct path *path)",
		"int follow_down(struct path *path)",
		"unsigned int full_name_hash(const void *salt, const char *name, unsigned int len)",
		"u64 hashlen_string(const void *salt, const char *name)",
		"int kern_path(const char *name, unsigned int flags, struct path *path)",
		"int vfs_path_lookup(struct dentry *dentry, struct vfsmount *mnt, const char *name, unsigned int flags, struct path *path)",
		"struct dentry *lookup_one_len(const char *name, struct dentry *base, int len)",
		"struct dentry *lookup_one_len_unlocked(const char *name, struct dentry *base, int len)",
		"int user_path_at_empty(int dfd, const char __user *name, unsigned flags, struct path *path, int *empty)",
		"int kern_path_mountpoint(int dfd, const char *name, struct path *path, unsigned int flags)",
		"int __check_sticky(struct inode *dir, struct inode *inode)",
		"struct dentry *lock_rename(struct dentry *p1, struct dentry *p2)",
		"void unlock_rename(struct dentry *p1, struct dentry *p2)",
		"int vfs_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool want_excl)",
		"struct dentry *vfs_tmpfile(struct dentry *dentry, umode_t mode, int open_flag)",
		"struct dentry *kern_path_create(int dfd, const char *pathname, struct path *path, unsigned int lookup_flags)",
		"void done_path_create(struct path *path, struct dentry *dentry)",
		"struct dentry *user_path_create(int dfd, const char __user *pathname, struct path *path, unsigned int lookup_flags)",
		"int vfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)",
		"int vfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)",
		"int vfs_rmdir(struct inode *dir, struct dentry *dentry)",
		"int vfs_unlink(struct inode *dir, struct dentry *dentry, struct inode **delegated_inode)",
		"int vfs_symlink(struct inode *dir, struct dentry *dentry, const char *oldname)",
		"int vfs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *new_dentry, struct inode **delegated_inode)",
		"int vfs_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry, struct inode **delegated_inode, unsigned int flags)",
		"int vfs_whiteout(struct inode *dir, struct dentry *dentry)",
		"int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen)",
		"const char *vfs_get_link(struct dentry *dentry, struct delayed_call *done)",
		"void page_put_link(void *arg)",
		"int page_readlink(struct dentry *dentry, char __user *buffer, int buflen)",
		"int __page_symlink(struct inode *inode, const char *symname, int len, int nofs)",
		"int page_symlink(struct inode *inode, const char *symname, int len)"
	],
	"stat":
	[
		"void generic_fillattr(struct inode *inode, struct kstat *stat)",
		"int vfs_getattr_nosec(const struct path *path, struct kstat *stat, u32 request_mask, unsigned int query_flags)",
		"int vfs_getattr(const struct path *path, struct kstat *stat, u32 request_mask, unsigned int query_flags)",
		"int vfs_statx_fd(unsigned int fd, struct kstat *stat, u32 request_mask, unsigned int query_flags)",
		"int vfs_statx(int dfd, const char __user *filename, int flags, struct kstat *stat, u32 request_mask)",
		"void __inode_add_bytes(struct inode *inode, loff_t bytes)",
		"void inode_add_bytes(struct inode *inode, loff_t bytes)",
		"void __inode_sub_bytes(struct inode *inode, loff_t bytes)",
		"void inode_sub_bytes(struct inode *inode, loff_t bytes)",
		"loff_t inode_get_bytes(struct inode *inode)",
		"void inode_set_bytes(struct inode *inode, loff_t bytes)"
	],
	"read_write":
	[
		"loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize)",
		"loff_t generic_file_llseek_size(struct file *file, loff_t offset, int whence, loff_t maxsize, loff_t eof)",
		"loff_t generic_file_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t fixed_size_llseek(struct file *file, loff_t offset, int whence, loff_t size)",
		"loff_t no_seek_end_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t no_seek_end_llseek_size(struct file *file, loff_t offset, int whence, loff_t size)",
		"loff_t noop_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t no_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t default_llseek(struct file *file, loff_t offset, int whence)",
		"loff_t vfs_llseek(struct file *file, loff_t offset, int whence)",
		"ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)",
		"ssize_t __kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)",
		"ssize_t kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)",
		"ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos, rwf_t flags)",
		"ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos, rwf_t flags)"
	],
	"timekeeping":
	[
		"u64 ktime_get_mono_fast_ns(void)",
		"u64 ktime_get_raw_fast_ns(void)",
		"u64 notrace ktime_get_boot_fast_ns(void)",
		"int pvclock_gtod_register_notifier(struct notifier_block *nb)",
		"int pvclock_gtod_unregister_notifier(struct notifier_block *nb)",
		"int __getnstimeofday64(struct timespec64 *ts)",
		"void getnstimeofday64(struct timespec64 *ts)",
		"ktime_t ktime_get(void)",
		"u32 ktime_get_resolution_ns(void)",
		"ktime_t ktime_get_with_offset(enum tk_offsets offs)",
		"ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs)",
		"ktime_t ktime_get_raw(void)",
		"void ktime_get_ts64(struct timespec64 *ts)",
		"time64_t ktime_get_seconds(void)",
		"time64_t ktime_get_real_seconds(void)",
		"void do_gettimeofday(struct timeval *tv)",
		"int do_settimeofday64(const struct timespec64 *ts)",
		"void getrawmonotonic64(struct timespec64 *ts)"
	],
	"timer":
	[
		"unsigned long round_jiffies(unsigned long j)",
		"unsigned long round_jiffies_relative(unsigned long j)",
		"unsigned long __round_jiffies_up(unsigned long j, int cpu)",
		"unsigned long round_jiffies_up(unsigned long j)",
		"unsigned long round_jiffies_up_relative(unsigned long j)",
		"void msleep(unsigned int msecs)",
		"unsigned long msleep_interruptible(unsigned int msecs)",
		"void __sched usleep_range(unsigned long min, unsigned long max)",
		"signed long __sched schedule_timeout(signed long timeout)",
		"signed long __sched schedule_timeout_interruptible(signed long timeout)",
		"signed long __sched schedule_timeout_killable(signed long timeout)",
		"signed long __sched schedule_timeout_uninterruptible(signed long timeout)"
	],
	"lockref":
	[
		"void lockref_get(struct lockref *lockref)",
		"int lockref_get_not_zero(struct lockref *lockref)",
		"int lockref_get_or_lock(struct lockref *lockref)",
		"int lockref_put_return(struct lockref *lockref)",
		"void lockref_mark_dead(struct lockref *lockref)",
		"int lockref_get_not_dead(struct lockref *lockref)",
		"int lockref_put_or_lock(struct lockref *lockref)"
	],
	"dcache":
	[
		"void __d_drop(struct dentry *dentry)",
		"void d_drop(struct dentry *dentry)",
		"void dput(struct dentry *dentry)",
		"struct dentry *dget_parent(struct dentry *dentry)",
		"struct dentry *d_find_alias(struct inode *inode)",
		"void d_prune_aliases(struct inode *inode)",
		"void shrink_dcache_sb(struct super_block *sb)",
		"int path_has_submounts(const struct path *parent)",
		"void shrink_dcache_parent(struct dentry *parent)",
		"void d_invalidate(struct dentry *dentry)",
		"struct dentry *d_alloc(struct dentry * parent, const struct qstr *name)",
		"struct dentry *d_alloc_pseudo(struct super_block *sb, const struct qstr *name)",
		"struct dentry *d_alloc_name(struct dentry *parent, const char *name)",
		"void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op)",
		"void d_set_fallthru(struct dentry *dentry)",
		"void d_instantiate(struct dentry *entry, struct inode * inode)",
		"void d_instantiate_new(struct dentry *entry, struct inode *inode)",
		"int d_instantiate_no_diralias(struct dentry *entry, struct inode *inode)",
		"struct dentry *d_make_root(struct inode *root_inode)",
		"struct dentry *d_find_any_alias(struct inode *inode)",
		"struct dentry *d_obtain_alias(struct inode *inode)",
		"struct dentry *d_obtain_root(struct inode *inode)",
		"struct dentry *d_add_ci(struct dentry *dentry, struct inode *inode, struct qstr *name)",
		"struct dentry *d_lookup(const struct dentry *parent, const struct qstr *name)",
		"struct dentry *d_hash_and_lookup(struct dentry *dir, struct qstr *name)",
		"void d_delete(struct dentry * dentry)",
		"void d_rehash(struct dentry * entry)",
		"struct dentry *d_alloc_parallel(void ** TODO)",
		"void __d_lookup_done(struct dentry *dentry)",
		"void d_add(struct dentry *entry, struct inode *inode)",
		"struct dentry *d_exact_alias(struct dentry *entry, struct inode *inode)",
		"void dentry_update_name_case(struct dentry *dentry, const struct qstr *name)",
		"void d_move(struct dentry *dentry, struct dentry *target)",
		"struct dentry *d_splice_alias(struct inode *inode, struct dentry *dentry)",
		"char *d_path(const struct path *path, char *buf, int buflen)",
		"char *simple_dname(struct dentry *dentry, char *buffer, int buflen)",
		"char *dentry_path_raw(struct dentry *dentry, char *buf, int buflen)",
		"void d_tmpfile(struct dentry *dentry, struct inode *inode)"
	],
	"mountspacenamespace":
	[
		"int __mnt_is_readonly(struct vfsmount *mnt)",
		"int mnt_want_write(struct vfsmount *m)",
		"int mnt_clone_write(struct vfsmount *mnt)",
		"int mnt_want_write_file(struct file *file)",
		"void mnt_drop_write(struct vfsmount *mnt)",
		"void mnt_drop_write_file(struct file *file)",
		"struct vfsmount * vfs_kern_mount(struct file_system_type *type, int flags, const char *name, void *data)",
		"struct vfsmount * vfs_submount(const struct dentry *mountpoint, struct file_system_type *type, const char *name, void *data)",
		"void mntput(struct vfsmount *mnt)",
		"struct vfsmount *mntget(struct vfsmount *mnt)",
		"bool path_is_mountpoint(const struct path *path)",
		"int may_umount_tree(struct vfsmount *m)",
		"int may_umount(struct vfsmount *mnt)",
		"struct vfsmount *clone_private_mount(const struct path *path)",
		"void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list)",
		"void mark_mounts_for_expiry(struct list_head *mounts)",
		"struct dentry *mount_subtree(struct vfsmount *mnt, const char *name)",
		"bool path_is_under(const struct path *path1, const struct path *path2)",
		"struct vfsmount *kern_mount_data(struct file_system_type *type, void *data)",
		"void kern_unmount(struct vfsmount *mnt)"
	], 
	"random":
	[
		"void get_random_bytes(void *buf, int nbytes)",
		"int wait_for_random_bytes(void)",
		"u32 get_random_u32(void)",
		"u64 get_random_u64(void)"
	],
	"pid":
	[
		"void put_pid(struct pid *pid)",
		"struct pid *find_pid_ns(int nr, struct pid_namespace *ns)",
		"struct pid *find_vpid(int nr)",
		"struct task_struct *pid_task(struct pid *pid, enum pid_type type)",
		"struct pid *get_task_pid(struct task_struct *task, enum pid_type type)",
		"struct task_struct *get_pid_task(struct pid *pid, enum pid_type type)",
		"struct pid *find_get_pid(pid_t nr)",
		"pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns)",
		"pid_t pid_vnr(struct pid *pid)",
		"struct pid_namespace *task_active_pid_ns(struct task_struct *tsk)"
	],
	"fuckthisshitimout":
	[
		"void do_exit(long code)",
		{
			"name": "complete_and_exit",
			"returnType": {"linux": "void"},
			"parameters":	[{"xenus": "sysv_fptr_t", "name": "sysvcb"}, {"linux": "long", "name": "code"}]
		},
		"void abort(void)"
	],
	"mmap":
	[
		"pgprot_t vm_get_page_prot(unsigned long vm_flags)",
		"unsigned long get_unmapped_area(struct file *file, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags)",
		"struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)",
		"struct vm_area_struct *find_extend_vma(struct mm_struct *mm, unsigned long addr)",
		"int vm_munmap(unsigned long start, size_t len)",
		"int vm_brk_flags(unsigned long addr, unsigned long len, unsigned long flags)",
		"int vm_brk(unsigned long addr, unsigned long len)"
	],
	"mmutils":
	[
		"void kfree_const(const void *x)",
		"char *kstrdup(const char *s, gfp_t gfp)",
		"const char *kstrdup_const(const char *s, gfp_t gfp)",
		"char *kstrndup(const char *s, size_t max, gfp_t gfp)",
		"void *kmemdup(const void *src, size_t len, gfp_t gfp)",
		"char *kmemdup_nul(const char *s, size_t len, gfp_t gfp)",
		"void *memdup_user(const void __user *src, size_t len)",
		"char *strndup_user(const char __user *s, long n)",
		"void *memdup_user_nul(const void __user *src, size_t len)",
		"int __get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page **pages)",
		"int get_user_pages_fast(unsigned long start, int nr_pages, int write, struct page **pages)",
		"unsigned long vm_mmap(struct file *file, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flag, unsigned long offset)",
		"void *kvmalloc_node(size_t size, gfp_t flags, int node)",
		"void kvfree(const void *addr)",
		"bool page_mapped(struct page *page)",
		"struct address_space *page_mapping(struct page *page)",
		"int __page_mapcount(struct page *page)",
		"unsigned long vm_memory_committed(void)"
	],
	"sched_core":
	[
	    "int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask)",
        "void kick_process(struct task_struct *p)",
        "int wake_up_process(struct task_struct *p)",
        "void preempt_notifier_inc(void)",
        "void preempt_notifier_dec(void)",
        "void preempt_notifier_register(struct preempt_notifier *notifier)",
        "void preempt_notifier_unregister(struct preempt_notifier *notifier)",
        "bool single_task_running(void)",
        "void preempt_count_add(int val)",
        "void preempt_count_sub(int val)",
        "void schedule(void)",
        "void preempt_schedule(void)",
        "void preempt_schedule_notrace(void)",
		{
			"name": "default_wake_function",
			"returnType": {"linux": "int"},
			"parameters":	[{"xenus": "wait_queue_entry_t_p", "name": "curr"}, {"linux": "unsigned", "name": "mode"}, {"linux": "int", "name": "wake_flags"}, {"linux": "void *", "name": "data"}]
		},
        "void set_user_nice(struct task_struct *p, long nice)",
        "int sched_setscheduler(struct task_struct *p, int policy, const struct sched_param *param)",
        "int sched_setattr(struct task_struct *p, const struct sched_attr *attr)",
        "int sched_setscheduler_nocheck(struct task_struct *p, int policy, const struct sched_param *param)",
        "int __sched __cond_resched_softirq(void)",
        "void __sched yield(void)",
        "int __sched yield_to(struct task_struct *p, bool preempt)",
        "long __sched io_schedule_timeout(long timeout)",
        "void io_schedule(void)"
	],
	"chardev":
	[
		"int register_chrdev_region(dev_t from, unsigned count, const char *name)",
		"void unregister_chrdev_region(dev_t from, unsigned count)",
		"int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count, const char *name)",
		"void cdev_init(struct cdev *cdev, const struct file_operations *fops)",
		"struct cdev *cdev_alloc(void)",
		"void cdev_del(struct cdev *p)",
		"int cdev_add(struct cdev *p, dev_t dev, unsigned count)",
		"void cdev_set_parent(struct cdev *p, struct kobject *kobj)",
		"int cdev_device_add(struct cdev *cdev, struct device *dev)",
		"void cdev_device_del(struct cdev *cdev, struct device *dev)",
		"int __register_chrdev(unsigned int major, unsigned int baseminor, unsigned int count, const char *name, const struct file_operations *fops)",
		"void __unregister_chrdev(unsigned int major, unsigned int baseminor, unsigned int count, const char *name)"
	],
	"linuxclass":
	[
		"int __class_register(struct class *cls, struct lock_class_key *key)",
		"void class_destroy(struct class *cls)",
		"void class_unregister(struct class *cls)",
		"struct class *__class_create(struct module *owner, const char *name, struct lock_class_key *key)",
		"void class_dev_iter_init(struct class_dev_iter *iter, struct class *clzz, struct device *start, const struct device_type *type)",
		"struct device *class_dev_iter_next(struct class_dev_iter *iter)",
		"void class_dev_iter_exit(struct class_dev_iter *iter)",
		"int class_for_each_device(struct class *clzz, struct device *start, void *data, sysv_fptr_t fn)",
		"struct device *class_find_device(struct class *clzz, struct device *start, const void *data, sysv_fptr_t matchfn)",
		"int class_interface_register(struct class_interface *class_intf)",
		"void class_interface_unregister(struct class_interface *class_intf)",
		"ssize_t show_class_attr_string(struct class *clzz, struct class_attribute *attr, char *buf)",
		"struct class_compat *class_compat_register(const char *name)",
		"void class_compat_unregister(struct class_compat *cls)",
		"int class_compat_create_link(struct class_compat *cls, struct device *dev, struct device *device_link)",
		"void class_compat_remove_link(struct class_compat *cls, struct device *dev, struct device *device_link)"
	],
	"modcore":
	[
		"int register_module_notifier(struct notifier_block *nb)",
		"int unregister_module_notifier(struct notifier_block *nb)",
		"void __module_put_and_exit(struct module *mod, long code)",
		"bool each_symbol_section(sysv_fptr_t stub, void * data)",
		"const struct kernel_symbol *find_symbol(const char *name, struct module **owner, const s32 **crc, bool gplok, bool warn)",
		"struct module *find_module(const char *name)",
		"int ref_module(struct module *a, struct module *b)",
		"int module_refcount(struct module *mod)",
		"void symbol_put_addr(void *addr)",
		"void __module_get(struct module *module)",
		"bool try_module_get(struct module *module)",
		"void module_put(struct module *module)",
		"struct module *__module_address(unsigned long addr)",
		"struct module *__module_text_address(unsigned long addr)"
	],
	"driversbasecore":
	[
		"struct device_link *device_link_add(struct device *consumer, struct device *supplier, u32 flags)",
		"void device_link_del(struct device_link *link)",
		"const char *dev_driver_string(const struct device *dev)",
		"ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)",
		"ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr, char *buf)",
		"ssize_t device_store_int(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)",
		"ssize_t device_show_int(struct device *dev, struct device_attribute *attr, char *buf)",
		"ssize_t device_store_bool(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)",
		"ssize_t device_show_bool(struct device *dev, struct device_attribute *attr, char *buf)",
		"int device_add_groups(struct device *dev, const struct attribute_group **groups)",
		"void device_remove_groups(struct device *dev, const struct attribute_group **groups)",
		"int devm_device_add_group(struct device *dev, const struct attribute_group *grp)",
		"void devm_device_remove_group(struct device *dev, const struct attribute_group *grp)",
		"int devm_device_add_groups(struct device *dev, const struct attribute_group **groups)",
		"void devm_device_remove_groups(struct device *dev, const struct attribute_group **groups)",
		"int device_create_file(struct device *dev, const struct device_attribute *attr)",
		"void device_remove_file(struct device *dev, const struct device_attribute *attr)",
		"bool device_remove_file_self(struct device *dev, const struct device_attribute *attr)",
		"int device_create_bin_file(struct device *dev, const struct bin_attribute *attr)",
		"void device_remove_bin_file(struct device *dev, const struct bin_attribute *attr)",
		"void device_initialize(struct device *dev)",
		"int device_add(struct device *dev)",
		"int device_register(struct device *dev)",
		"struct device *get_device(struct device *dev)",
		"void put_device(struct device *dev)",
		"void device_del(struct device *dev)",
		"void device_unregister(struct device *dev)",
		"int device_for_each_child(struct device *parent, void *data, sysv_fptr_t stub)",
		"int device_for_each_child_reverse(struct device *parent, void *data, sysv_fptr_t stub)",
		"struct device *device_find_child(struct device *parent, void *data, sysv_fptr_t stub)",
		"struct device *__root_device_register(const char *name, struct module *owner)",
		"void root_device_unregister(struct device *dev)",
		"struct device *device_create(struct class *clazz, struct device *parent, dev_t devt, void *drvdata, const char *fmt)",
		"struct device *device_create_with_groups(struct class *clazz, struct device *parent, dev_t devt, void *drvdata, const struct attribute_group **groups, const char *fmt)",
		"void device_destroy(struct class *clazz, dev_t devt)",
		"int device_rename(struct device *dev, const char *new_name)",
		"int dev_printk_emit(int level, const struct device *dev, const char *fmt)",
		"void dev_emerg(const struct device *dev, const char *fmt)",
		"void dev_alert(const struct device *dev, const char *fmt)",
		"void dev_crit(const struct device *dev, const char *fmt)",
		"void dev_err(const struct device *dev, const char *fmt)",
		"void dev_warn(const struct device *dev, const char *fmt)",
		"void dev_notice(const struct device *dev, const char *fmt)",
		"void _dev_info(const struct device *dev, const char *fmt)",
		"void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode)",
		"void device_set_of_node_from_dev(struct device *dev, const struct device *dev2)"
	],
	"usermem":
	[
		"unsigned long _copy_from_user(void *to, const void __user *from, unsigned long n)",
		"unsigned long _copy_to_user(void __user *to, const void *from, unsigned long n)"
	],
	"readdir":
	[
		"int iterate_dir(struct file *file, struct dir_context *ctx)"
	],
	"rwsem":
	[
		"void downgrade_write(struct rw_semaphore *sem)",
		"void up_write(struct rw_semaphore *sem)",
		"void up_read(struct rw_semaphore *sem)",
		"int down_write_trylock(struct rw_semaphore *sem)",
		"int down_write_killable(struct rw_semaphore *sem)",
		"void down_write(struct rw_semaphore *sem)",
		"int down_read_trylock(struct rw_semaphore *sem)",
		"void down_read(struct rw_semaphore *sem)"
	],
	"signal":
	[
		"void kernel_sigaction(int sig, __sighandler_t action)",
		"void recalc_sigpending(void)",
		"int dequeue_signal(struct task_struct *tsk, sigset_t *mask, siginfo_t *info)",
		"void flush_signals(struct task_struct *t)",
		"void force_sig(int sig, struct task_struct *p)",
		"int send_sig(int sig, struct task_struct *p, int priv)",
		"int send_sig_info(int sig, struct siginfo *info, struct task_struct *p)",
		"int sigprocmask(int how, sigset_t *set, sigset_t *oldset)",
		"int kill_pgrp(struct pid *pid, int sig, int priv)",
		"int kill_pid(struct pid *pid, int sig, int priv)",
		"int kill_pid_info_as_cred(int sig, struct siginfo *info, struct pid *pid, const struct cred *cred)"
	],
	"gup":
	[
		"int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm, unsigned long address, unsigned int fault_flags, bool *unlocked)",
		"long get_user_pages_locked(unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, int *locked)",
		"long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages, struct page **pages, unsigned int gup_flags)",
		"long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm, unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, struct vm_area_struct **vmas, int *locked)",
		"long get_user_pages(unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, struct vm_area_struct **vmas)",
		"long get_user_pages_longterm(unsigned long start, unsigned long nr_pages, unsigned int gup_flags, struct page **pages, struct vm_area_struct **vmas_arg)"
	],
	"iomap":
	[
		"void *ioremap_nocache(resource_size_t phys_addr, unsigned long size)",
		"void *ioremap_uc(resource_size_t phys_addr, unsigned long size)",
		"void *ioremap_wc(resource_size_t phys_addr, unsigned long size)",
		"void *ioremap_wt(resource_size_t phys_addr, unsigned long size)",
		"void *ioremap_cache(resource_size_t phys_addr, unsigned long size)",
		"void *ioremap_prot(resource_size_t phys_addr, unsigned long size, unsigned long prot_val)",
		"void iounmap(void *addr)"
	], 
	"mempolicy":
	[
		"struct page *alloc_pages_current(gfp_t gfp, unsigned order)"
	],
	"alloc_pages":
	[
		"void split_page(struct page *page, unsigned int order)",
		"struct page * __alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid, nodemask_t *nodemask)",
		"unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)",
		"unsigned long get_zeroed_page(gfp_t gfp_mask)",
		"void __free_pages(struct page *page, unsigned int order)",
		"void free_pages(unsigned long addr, unsigned int order)",
		"void __page_frag_cache_drain(struct page *page, unsigned int count)",
		"void *page_frag_alloc(struct page_frag_cache *nc, unsigned int fragsz, gfp_t gfp_mask)",
		"void page_frag_free(void *addr)",
		"void *alloc_pages_exact(size_t size, gfp_t gfp_mask)",
		"void free_pages_exact(void *virt, size_t size)",
		"unsigned long nr_free_buffer_pages(void)",
		"long si_mem_available(void)",
		"void si_meminfo(struct sysinfo *val)",
		"void adjust_managed_page_count(struct page *page, long count)",
		"unsigned long free_reserved_area(void *start, void *end, int poison, char *s)"
	],
	"vmalloc":
	[
		"struct page *vmalloc_to_page(const void *vmalloc_addr)",
		"unsigned long vmalloc_to_pfn(const void *vmalloc_addr)",
		"int register_vmap_purge_notifier(struct notifier_block *nb)",
		"int unregister_vmap_purge_notifier(struct notifier_block *nb)",
		"void vm_unmap_aliases(void)",
		"void vm_unmap_ram(const void *mem, unsigned int count)",
		"void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)",
		"void unmap_kernel_range_noflush(unsigned long addr, unsigned long size)",
		"void unmap_kernel_range(unsigned long addr, unsigned long size)",
		"int map_vm_area(struct vm_struct *area, pgprot_t prot, struct page **pages)",
		"struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags, unsigned long start, unsigned long end)",
		"void vunmap(const void *addr)",
		"void *vmap(struct page **pages, unsigned int count, unsigned long flags, pgprot_t prot)",
		"void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)",
		"int remap_vmalloc_range_partial(struct vm_area_struct *vma, unsigned long uaddr, void *kaddr, unsigned long size)",
		"int remap_vmalloc_range(struct vm_area_struct *vma, void *addr, unsigned long pgoff)",
		"struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes)",
		"void free_vm_area(struct vm_struct *area)"
	],
	"memory":
	[
		"int zap_vma_ptes(struct vm_area_struct *vma, unsigned long address, unsigned long size)",
		"int vm_insert_page(struct vm_area_struct *vma, unsigned long addr, struct page *page)",
		"int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr, unsigned long pfn)",
		"int vm_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr, unsigned long pfn, pgprot_t pgprot)",
		"int vm_insert_mixed(struct vm_area_struct *vma, unsigned long addr, pfn_t pfn)",
		"int vm_insert_mixed_mkwrite(struct vm_area_struct *vma, unsigned long addr, pfn_t pfn)",
		"int remap_pfn_range(struct vm_area_struct *vma, unsigned long addr, unsigned long pfn, unsigned long size, pgprot_t prot)",
		"int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len)",
		"int apply_to_page_range(struct mm_struct *mm, unsigned long addr, unsigned long size, pte_fn_t fn, void *data)",
		"void unmap_mapping_range(struct address_space *mapping, loff_t const holebegin, loff_t const holelen, int even_cows)",
		"int handle_mm_fault(struct vm_area_struct *vma, unsigned long address, unsigned int flags)",
		"int follow_pfn(struct vm_area_struct *vma, unsigned long address, unsigned long *pfn)",
		"int generic_access_phys(struct vm_area_struct *vma, unsigned long addr, void *buf, int len, int write)",
		"int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, unsigned int gup_flags)"
	],
	"unsafespinnies":
	[
		"void _raw_spin_lock(void *lock)",
		"void _raw_spin_unlock(void *lock)"
	],
	"map_hack":
	[
		"struct vm_area_struct *_install_special_mapping(struct mm_struct *mm, unsigned long addr, unsigned long len, unsigned long vm_flags, const struct vm_special_mapping *spec)",
		"int vm_munmap_ex(struct mm_struct *mm, unsigned long start, size_t length"
	],
	"KNIFE":
	[
		"void free_task(struct task_struct *tsk)",
		"void __put_task_struct(struct task_struct *tsk)",
		"void __mmdrop(struct mm_struct *mm)",
		"void mmput(struct mm_struct *mm)",
		"struct file *get_mm_exe_file(struct mm_struct *mm)",
		"struct file *get_task_exe_file(struct task_struct *task)",
		"struct mm_struct *get_task_mm(struct task_struct *task)"
	],
	"file_table":
	[
		"unsigned long get_max_files(void)",
		"struct file *alloc_file(const struct path *path, fmode_t mode, const struct file_operations *fop)",
		"void fput(struct file *file)"
	]	
}
